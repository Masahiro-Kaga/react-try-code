187 - 188

  hooksフォルダと、その中にcustom hookを作る。
  ForwardCounter.jsをベースに、作成する。

  ForwardCounterは、結局　return <Card>{counter}</Card> が目的であるということを念頭に置く。
  つまり、ForwardCounter内で、counterが導き出せれば良い。
  よって、ForwardCounterとcustom hookであるuse-counterの核部分のコードの違いは、
  return <Card>{counter}</Card> か、 return counter　かの違いのみ。

  よって、新たに作ったcustom hookでも、counterを返すようなhookを作ってexportする。
  説明にもあるが、custom hookは、一つのファンクションであると心得る。


189

  BackwardCounterも同じように適用させる。
  そのために、custom hookの中で引数を設定し、かつ条件分岐ifを使って、各々のコンポーネントで、+と-どちらを適用させるかを設定する。

  useEffectのdependencyとして、設定した引数を入れる必要がある。


191

  先に、カスタムフックを作成。(use-http.js)
  共通部分を見つけて、それを搭載していく。

  Specificのものはカスタムフックには含まない、ex)useEffectはApp.jsのみのため。
  FetchするURLは固定ではなく、どのURLでも使えるように、これをuseHttpの引数に指定する。そのほか、methodやbodyなども引数に入れる。

  その際、引数をいくつも指定するよりは、オブジェクト型にした方が無駄なコードがなくて良い。

  sendingRequestという名前をつけているが、これはPOSTという意味ではなくて、GETもPOSTもリクエストを送るという動作は共通なので、この名前が適切。

  モダンなJavaScriptの機能として、もし同じ名前でオブジェクト内のvalue・変数を返すなら、
  {
  isLoading : isLoading,
  error : error,
  sendRequest : sendRequest,
  }
  とはせず、次のように省略することが可能。
  {
  isLoading,
  error,
  sendRequest,
  }
  なお、これらはオブジェクト形式としてreturnされるので、注意。
  

191-193
(193の後半、ビデオ内で２通りの違い説明があるが、ちょっと意味不明なので多少無視。最終的なコードのロジックだけ覚えれば大丈夫。)

  *これ以降の説明は、App.jsとNewTask.jsそれぞれの、既に完成形のコードを元に説明している。192とかの一部は無視しても良い。逆に混乱する可能性もあるため。

  const { isLoading, error, sendRequest: fetchTasks } = useHttp();
  にて、destructuringによってそれぞれ、useHttpカスタムフックでリターンされる
  isLoading,
  error,
  sendRequest,
  の値を得る。

  sendRequestはファンクションだが、引数はこのカスタムフックが使われるコンポーネント内で設定されたものを使って、sendRequestファンクションに搭載して使う。
  当然、useHttp()が発動されたからと言って、sendRequestが発動したということではなく、sendRequestが使えるようになりましたということだけ。
  また、今回のケースの場合、App.jsに、fetchTasksのファンクション名で設定されているので、そちらに合わせるため、alias設定して名前をsendRequestからfetchTasksにしている。

  ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

  sendRequestには、カスタムフックを渡すコンポーネント先で、二つの引数を搭載する必要があるが、そのうち、applyDataについて、ちょっと新しい技で混乱してしまいがち。

  applyDataには、既にdataという引数が設定されてしまっており、違和感を感じてしまう。しかしこれは、デフォルトの引数として設定されているという意味で、渡す先のコンポーネントで、dataのデータ形式（jsonデータ）を引数として渡しても機能するファンクションを、sendRequestの第二引数として搭載してやる必要があり、デフォルトで引数があるため別建てで引数を設定しなくても良い、という意味になる。

  ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

  App.jsでの設定（カスタムフックの搭載方法）、上から順に

  const [tasks, setTasks] = useState([]);
  これはspecificだったため、カスタムフックには搭載せず、直接App.jsで設定。

  const { isLoading, error, sendRequest: fetchTasks } = useHttp();
  これはdestructuring。カスタムフックの特徴として、Hook、変数及びファンクションの機能をそのままreturnで返して、譲渡先にそれを渡して使うという仕様になっているから、このような形でオッケー。

  useEffectを設定。ブラウザの読み込み、リフレッシュ時にfetchTask（sendRequest）を発動するようにするためのもの。
  これは、192の7:40において説明してるが、dependencyを[]と、空の状態で設定すれば良いが、そうすると注意（黄色い下線）が出てしまう。fetchTasksをdependencyに入れなくてはいけないため。
  でもこれを入れてしまうと、無限ループが起こる。ファンクションは参照型なので、コンポーネントの更新によってファンクションは（機能が変わらなかったとしても）新しいものとして認識されてしまう。
  そのため、コンポーネント更新　→　dependency（fetchTasks）が更新されuseEffect発動　→ コンポーネント更新…
  という具合。
  なので、callback関数を使う必要があるということ（ここは説明省略、193序盤参照）。

  ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

  transformTasksファンクションを作り、後のfetchTasksで使う。
  前述したように、fetchTasks = sendRequestということを念頭に。
  fetchTasks(
        { url: 'https://react-http-6b4a6.firebaseio.com/tasks.json' },
        transformTasks
      );
  この第一引数「url」は、object型{}で存在する（requestConfigに該当する）のでオッケー。

  難解なのは、applyDataの部分。
  App.jsで、「transformTasks」をfetchTasks(sendRequest)の第二因数として指定している。ここで疑問なのが、なぜtransformTasks()としてカッコを付けず発動しないのか。
  それは、use-http.jsにて、引数であるapplyDataはあくまで、「ファンクションを渡せ」という意味でapplyDataが存在し、かつfetchTasks(sendRequest)がApp.jsで発動すれば、カスタムフックのuseHttpのsendRequest内で「applyData(data) 」として発動するため、別にApp.jsでカッコ付きで発動させる必要がない、というかしてはいけない。
  また、引数自体も、カスタムフック内でdataが渡されるので、App.jsでやるべきことは、dataに該当する引数を設定し、それをどうApp.jsで処理するのかということをコードとして書けば良い。
  const transformTasks = (tasksObj) => {…
  tasksObjという名前はどうでも良い。これがdataに該当する・置き換わる部分。

  要約？すると、fetchTasks(sendRequest)をApp.jsで発動したら、transformTasksさえ引数に設定してくれれば、カスタムフック内で(transformTasksをapplyDataファンクションとして)、dataという引数と一緒に使って発動してやるよ、ということ。


194

  NewTask.jsにカスタムフックを適用させる。
　
　useHttp()でdestructureにする、sendRequestのエイリアスを設定するのは一緒。
　そして、実際にsendRequest（alias:sendTaskRequest）を使って、url,method,headers,bodyを設定。
　注意すべきは、body。カスタムフックで、すでにJSON.stringify(**＊)の形で設定されているので、ここに入力するのは、オブジェクト形式のデータのみ（{text:taskText}）。

　次に、カスタムフックで言うところの、apply(data)に該当するファンクションを作る（ビデオでの名前はcreateTaskとしている）。
　→
  const generatedId = data.name; // firebase-specific => "name" contains generated id
  const createdTask = { id: generatedId, text: taskText };
  props.onAddTask(createdTask);

  constで上記のファンクションを作ったら、sendTaskRequestの第二引数に渡す。
  ここで問題になるのは、（App.jsのように）このファンクションをenterTaskHandlerの外側に作ってしまったら、text:taskTextのデータをもらってくることができなくなる。
  解決方法として、二つ紹介されているが、
  一つ目は、単純。ただ、enterTaskHandlerの中にこのファンクションを作って（移動して）しまえば良い。ただ、マックスはディープネストが嫌いだから。
  オプション２がある。

  bind()を使う。
  applyData(data)の引数は一個。でも、createTaskにtaskTextとtaskData二つ引数を設定して、
  createTask＊カッコなし、を、createTask.bind(null,taskText)にする。
  null部分は、オブジェクトが入るけど、今回は使わない。その場合はnull。二つ目に、第一引数としてtaskTextと設定したら、自動的に、最後の因数がカスタムフックのdataに適応される仕組み。

  でも、あまりよくわからないので、オプション１でもいいような気がする。


 