294

    Deoloyの流れ。
        1 Test Code
        2 Optimize Code(パフォーマンスの最適化のこと、どう早くロードできるかとか)
        3 Build App For Production
        4 Upload Productioin Code to Server
        5 Configure Server


295

    ２のOptimize Code部分。
    Lazy Loadingとは、User側で、使わないコンポーネントとかページはimportせず、必要になったら（呼ばれたら）importするという考え方。
    大きいアプリケーションとかページが多い時は必要、くらい。

    以前やったuseMemoとかも、無駄なロード・読み込み時間を省くという点では似てる。

    useMemoは、とある変数ステートが変わった段階で（例えばuseStateで更新された値をuseEffectのようにuseMemoの第二引数に入れる）、そのuseMemo
    内のコードが初めて走る、若しくはuseMemoが適用されているコンポーネントがレンダリングされる、というもの。注目すべきは、中のコードが複雑だったり多くの計算をさせる場合にそれを避けるために有効なもの。
    https://tyotto-good.com/blog/usememo

    対してReact.Lazyは、これまで「import コンポーネント」と記述していたものは全て、そのコンポーネントを使用しない場合でもダウンロードされてimportしていたが、今回SPAで学んだような、importしていても画面に表示しないコンポーネントもある（App.jsを見ればわかる）が、その場合、画面に表示しようとしているコンポーネントやページのjsファイルのみ、インポートされるようにするというもの。
    動的にコンポーネントやページをインポートできる、と表現してる。
    必要なときにそのコンポーネントがダウンロードされる時に多少なりとも時間はかかるので、fallbackファンクション（読み込みを待って、その後にコンポーネントを表示）をSuspenseのプロパティとして設定しなきゃならない。マックスの説明の通り、検証のネットワークタブを見ると、コンポーネント呼び出し後にchunk.jsというのが自動で作られているのが分かる（10:40のとこ）。chunkとは、カタマリという意味。ダウンロードされたものがどれかという線引きをしてくれているのか。
    ↓わかりやすい説明ページURL.
    https://numb86-tech.hatenablog.com/entry/2020/01/05/175743

    無駄なロード・読み込み時間を省くという点で、Code Splittingも同様に有効な手段。
    https://qiita.com/seya/items/06b160adb7801ae9e66f
        Code Splittingの目的は初期表示にかかる時間、及びユーザがインタラクションできるようになるまでの時間の削減です。
        SPAではJSがHTMLを生成してそれを描画します。なのでJSがパース/コンパイル/実行されるまでは何も表示されない時間が続きます。また、基本的にSPAはアプリケーション全てのコードを一つのファイルにバンドルするため、得てしてファイルサイズが大きくなりがちです。
        なので、一度に全部読み込むのではなく、使う部分だけのJSを取り出して初期表示を速くしようというのがCode Splittingの目的です。
        まずページの表示にどれくらいかかっているのかをLighthouseで見てみます。→ Lighthouseというのがあるらしい。


296

    3のBuild App For Production。
    今までローカルでサーバーを立ち上げて画面を表示させていたが、全て準備ができたらリアルサーバーを使ってデプロイしなければならない。
    その際、package.jsonのscriptにあるbuildを走らせることで、ローカルサーバー立ち上げと画面表示の手前までの状態で止めてくれる。かつ、サーバーにあげなければならないファイルとフォルダを一色作成してくれて、[build]という名前のフォルダが現れる。
    npm run buildしてみる。


297

    いよいよ、アップロード。4 Upload Productioin Code to Serverの部分。
    上のbuildフォルダの中のjsほかコードは全て、node.jsコードのようなサーバーサイド用コードではなく、クライアントサイド用のコード。
    ここでとても重要なのは、Reactに限らず、どんなフレームワークで作られたものであっても、SPAであれば、Static Websiteと言うことになる。つまり、
    このクライアントサイド用の全てのコードには、サーバーサイドコード（を発火させるためのコード）は一切ない、phpとかnode.jsコードとか。Only HTML,CSS & Javascript(Client side) と言うことになる。
    通常phpとかだったら、getとかpostとかして、urlに入れてサーバーに送って通信して、サーバーにあるphpコードがそれを受け取ってSQLサーバーとかに送ってデータ持ってきて…っていうことをやるが、SPAはそれが一切ない。
    Reactの中にもfetchしてhttpでデータのやり取りするけど、それはあくまでコンポーネント内で済む話でurl使って通信している訳ではない。

    自分でバックエンドやAPIを作っても良い、firebaseの代わりに。firebase自体、サーバーの役割をしているが、動的ウェブサイトと違ってSPAなので、クライアントサイドのコードを一括してユーザーに提供すると言うだけ。

    静的ウェブサイトは、はるか昔のウェブサイトと同じ。ただユーザーが見るためのウェブサイトを送るだけと言う感じ。
    SPAのようなStatic Websiteを作るためには、Static Website Hosting Provider（このキーワードで検索してみそ）というのが必要になる。
    firebaseもその一つだけど、単純に静的サイトホスト機能だけを有しているものではなく、ほかの色んな機能も提供している、データベースとか。
    2:40くらいから説明がある。

    3:40からfirebaseのホスティングの方法の説明。
    
    １ 左のHostingをクリック
        npm install -f firebase-tools (sudoしないといけないらしい、macだと)
        これはグローバルインストール。全てのSPAサイトをfirebase使うんだったら必要。他のSPAでも。
        とりあえず、その下はチェックいれてない。
        次へ。
    ２ firebaseにログイン。自前アプリのルートディレクトリからコマンド実行すべし。
        firebase login
        マックスの話だと、ウェブサイトからログインしてもいいとかなんとか。
        cliから実行すると、ウェブ上でgoogleログイン画面が開いて、ログインする。
    ３ プロジェクトの開始
        firebase init
        ここで、いくつか質問を聞かれる。
        firebaseの色んな機能をここから選べる、すごい。今はホスティングを利用したいので、Hosting:Configure Files…を選択。
        注：日本語入力解除しないと、スペースキーで選択できない。
        Use an existing project 選択。
        そのあと、前回データベース設定するときに作ったプロジェクト（この時点のやつは、react-httpっていうやつ。その時によって自分で作ったプロジェクト名を確認すること。）が表示されるので、それを選択。
    ４ デプロイするフォルダを選択
        ここで重要なことを聞かれる。どのフォルダをデプロイ対象にするのかと。
        デフォルトでは、自前アプリの直下のpublicが指定されているが、それではなく、さっきnpm run build で作成されたbuildフォルダを選択すること。


298

    ５ SPAアプリであることを宣言
        ここでまた重要な質問がされる。
        configure as a single page app(rewrite all urls to /index.html)?
        マックスがClient-side Routing と Server-side Routingの違いを説明。
        デフォルトでは、サーバーはツリーのURL（/abc から /abc/some-route へページ遷移しようとする場合）であったとしても、違うURLだったらクライアントからリクエストが送られて、そのURLに対応するページが送られる。でもSPAだからそれはしたく無い。
        なので、yを選択。
        あとは
        Set up automatic builds and deploys with GitHub? No にして、
        File build/index.html already exist. Overwrite? No にする。
        最後のやつは、Nにするとfirebaseでテンプレートを置いてくれるが、自分がnpm run buildで作ってできたやつを使うことにしているので。NOとする。
    ６ Firebaseへのデプロイ
        上の5 Configure Serverの部分。
        firebase deploy をコマンドラインで走らせる。
        そしたら、HostingURLというのが出てきて、そこからアクセスできるよと教えてくれる。
        firebaseのページでも出てる。
            Project Console: https://console.firebase.google.com/project/react-http-f3ec8/overview
            Hosting URL: https://react-http-f3ec8.web.app
    ７ ホスティングの管理
        ウェブからfirebaseのコンソールに移動して（該当プロジェクトを選択して）hostingページにいくと、管理ページになっている。そこで、ドメインをどこかでゲットしたらそれを追加したり、色々管理できる。
    ８ 必要がなくなったり、止めたい時
        一時的にホスティングをストップさせたい場合は、
        firebase hosting:disableとすれば大丈夫。
        また、完全に削除したい場合は、ウェブのコンソール画面から削除っての探したらある。多分、disableにしてからじゃないと削除の項目が出てこないっぽい。


＊＊＊動画も一応撮ったので参考までに。なお、npm run buildをするのがデプロイした後で遅かったので、少し違う部分あり。
