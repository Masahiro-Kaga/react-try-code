250,251

事前説明、大したことないかな。


252 前半

まず、このウェブアプリがどのように動くか、どんなものか把握してなにしたらいいかイメージさせる必要あり。
完成バージョンの挙動は、253の17:20あたりで確認。

事前に必要なモジュール（redux,redux-toolkitも含め）がある。jsonにすでにredux,redux-toolkit以外のディペンデンシーは載ってるので、npm installで必要モジュールインストール。そしたらWebページがレンダリングできるようになる。
その後、redux,redux-toolkitも手動でインストール


252 中盤（253にかけて、かなり長丁場：今までのおさらい）

順番をしっかり決めて、進める。
us-slice関連から

１ ui-slice.js作成、Cartコンポーネントのトグルを作るので、それに応じたつくりにする。
２ store/index.jsでstoreを作ってexportする。
３ src/index.jsにて、storeを全コンポーネントに供給すべく、Providerする（思い出して！）。
４ CartButton.jsにて、クリックでtoggle functionを発動させる。
５ App.jsにて、cartIsVisibleを呼んで、トグル機能を作る。
完了


252 後半ー13:35
次に、cart-slice（難しいし、コード長い）
１ cart-slice.jsを作成（多少複雑）、findとfilter functionを使います。   
   配列に入れる項目の考え方としては、とにかく別のところでstore(state)として加工なしで使えるように、多くの項目を入れておく。Dispatchで他のコンポーネントボタンの発動で持ってくるデータはid,title,priceしかないが、配列にはstoreには後々すぐつかう、思いつくデータを全部入れること。　
    initialState作成。
    addItemToCart(state,action),removeItemFrom(state,action)の二つの箱（reducer）作成。
        addItemToCart
            新しいアイテムが増えるからpayload用意
            アイテムの種類に関わらず、合計値を＋１（右上カートの中の数を増やすもの）
            ifにて、そのアイテムオブジェクト（item）がすでに配列の中に存在するかどうかの条件分岐。
            true（findで見つかったオブジェクトを返す。undefine?ならfalse）:配列（items）の中にオブジェクト、そしてそのオブジェクト（item）には、値段、数、合計額、名前。それをプッシュ。
            false:そのitemの数と合計額を更新する。
        removeItemFrom
            アイテム増えないけど、どのアイテムの数量を削除するのかわからないといけないから、アイテムのidをペイロードに。
            他のアイテム含めの総合計を減らす。
            条件分岐、現在アイテムが１つかどうかで、全部消すかそのアイテムの個数一個だけ引くか。
            filter、かしこい使い方して一発で削除してる。他のファンクションだとズバリ削除できるものがないっぽい。
            https://www.fenet.jp/dotnet/column/language/3439/
            https://qiita.com/Sekky0905/items/598b47fea2106b8c140e
    そのあと、スライスから二つのものをエクスポート。


253

続き。3:30までは引き続きcart-slice.
２ storeのindex.jsにcartSlice.js関連をインポート。
※ ３の説明として：Products以下コンポーネントは、途中から追加や削除するものではなく、もともとある商品（の一覧）なので、勘違いしないように。
３ Shop/Products.jsとProductItem.jsを整理、まずは前者。もともと暫定で１つあるダミー品目をさらに、配列処理するために二つコンポーネント前に作る。idやらpriceはアプリの画面見て必要なものを用意してみる。mapファンクションを使うので、keyが必要であることに注意。
４ 6:50からProductItem.js（少し難）。ここでボタンをクリックしてDispatchするから、ここにDispatch系の機能全て搭載。
５ 品目の各情報（値段やら品名やら）はProductコンポーネントから持ってくる。ということは、props。そしてDecomposeして必要な変数を設定。そしてdispatchを組んで必要な変数（Payloadとして、だからスライス参考）をブッ込む。変数のショートカットの書き方もいい加減覚えて。

９:20からCart関連。

６ CardButtonで、全部のアイテム（種類に関わらず）の数を表示させるため、useSelectorを搭載して数を表示させる。
７ Cart.jsは現時点でダミー。そのため、cartSliceから持ってくる。そしてmapを使って展開して表示する。そうすると、２つの製品をそれぞれいくつか選択後、右上のボタンを押せば、真ん中にカートが現れる。CartItemをmapで展開するには、直接、key attributeを持っていないとエラーが出る。itemオブジェクトのidだけではダメ。
※ 14:00 Maxのミスも勉強になる。
８ CartItem.js。すでに真ん中に表示されたカートの中のプラスとマイナスのボタンを動作させる。いくつかの作り・留意事項はProductItem.jsとちょっと同じ。addの他にremoveも必要となる。

完成バージョンの挙動は、17:20あたりで確認。
なお、カートのマイナスボタンを押すと、個数は減るが合計額は減らないのは、マックスのコードをそのまま写しても同じ挙動。（cart-sliceのどっちのreducerのelse以降に、existingItem.totalPrice = existingItem.price * existingItem.quantity　を入れてやればいい。）


254

firebaseデータベースに、データを転送する方法と注意事項。
ちなみに、firebaseはコース182で構築方法やってる。

-----------進める前に、182のfirebaseの構築部分を参照、memoと一緒に。-----------

非同期（asyncness）の処理をしなければならないと説明しているが、つまりstateのどこかが変わっているプロセスの最中でfirebaseにデータを渡す処理を発動させてしまうと、他に送りたいデータがあったのに、先に一部のデータだけ渡ってしまう。そのため、非同期処理、つまり全てのstate更新処理が終わってから、データを渡すという処理をしなければならない。
マックスは、絶対にreducerの中には組み込むなと言ってて、その代わり二つの方法があるとのこと。


255

バックエンドとフロントエンドのそれぞれの仕事量について。
データ等のやりとりをする際、バックエンド（nodeJS,php...）の仕事量を増やせばフロントエンド側（React）でやることは減る。一方でフロントエンドでしっかりやってれば、バックエンドの仕事量は減る。

ちなみに、今回はバックエンドについてはコースに入ってないよーだって。
したがって、今回はフロントエンドで出来る限りどうやってバックエンドにデータを送り込んで処理するかというのが課題らしい。


256

ProductItem.jsの中で、現時点のstateと同じものをdispatchするため、現時点のstateをコピーしようとしている（stateをmutateしないように、慎重にコピーしてる。reducerの中ではmutateは厳禁。）。でもこれはダメと言ってる。非同期でデータをフェッチしようとしてるのか。
コードはセクション最後に掲載されていて、おまけコードとしてgitの最終ログにも登録済み（Git kraken参照）


257,258

useEffectとuseSelectorの合わせ技で、actionを起こした時と同時にfirebaseにデータを登録する。
ただしこの場合、useEffectのdependencyであるcartが更新（ページをリロード）された際に、空のデータを送って、今までのデータを上書きしてしまうので問題。次のレクチャーで直すって言ってる。確かにfirebase画面を一緒に開いてたら、その様子が窺い知れる。

cart-slice.jsのreplace アクション、結局何にあ使うかわからん。が、とりあえずコード打っておく。
ー＞最後の261で使う。

ちなみに、Googleのインスペクション（検証）のネットワークタブを見て、何がどう送られたかを見ることができるので、実用すること。


259（ちょっとむずいし難解）

fetchしてデータの送信が成功したか失敗したかを、ヘッダーの最上部に表示する。特にApp.jsが注目の中心。全てApp.jsのuseeffectの中に必要機能等を入れるので、ページ読み込み時とCartの値が変わったとき（つまりcartがどこかのコンポーネント内でdispatchされた時）に、このヘッダー上部のお知らせが発生する仕組み。一回、完成版をビデオで見たほうがいい。

１ 最初に、Notification.js && cssを用意。復習のため最初から自分で作っても良い。一度、reduxを使う前に、AppにNotificationのコンポーネントをプロパティと一緒に乗せてみて、サクセスとエラーの時ともに表示されるか試してみる。

２ ui-slice.jsに新しいreducer追加。notificationオブジェクトを作成して初期値設定。項目はstatus,title,message。　payloadから新しいデータ持ってくる形。（２と３、どっち先でもよい。順序だててイメージしやすい方）

３ App.jsに、sendCartData = async以下を作る。今回はtry/catchを使わない簡潔版らしい。
    最初にフェッチ前のロード状態のペイロードを渡すdispatchを作成。
    そのあとに、フェッチによる非同期処理を書いていく。fetch実行してresponse変数を完成させる。
    もしレスポンスがokでなければ、エラーを投げる。
    エラーなければ最終的に、dispatchでサクセス設定。

４ sendCartData()を実行するが、try/catchを使わない場合、このファンクションの後にcatch処理を書くということができる。
    https://qiita.com/akameco/items/cc73afcdb5ac5d0774bc
    また、sendCardDataファンクションには、acyncがついている、つまりPromise（必ず最後まで実行される・エラーでそれ以降のコードが止まることはない）がついているので、実行する際にドットの後でcatchを付けてオッケーで、エラー出れば必ず次いく、という理論をマックスは説明している。

    なお、マックスの示す誤りの例として、if(!response.ok)の後に、サクセスとかと同じように
        dispatch(
        uiActions.showNotification({
          status: 'error',
          title: 'error!',
          message: '.....',
        })
    と設定するだけでは、他のエラーをキャッチできない（httpがokであっても、例えばシンタックスエラーや他のエラーも当然想定される）。そのため、必ずErrorを投げるというコードを打たなければならない。

５ useEffectのdipendencyには、cardを入れる。そして、これだけだと警告が出るので、dispatch()もいれなければならないらしい。これはなぜか不明だが、多分、cardを梱包している大元のファンクションだからじゃないか。つまり、cardの値に変化があったら、そのcardの値を利用しているファンクションも依存関係として存在している、つまりそのファンクションも実行されなければならない、という意味なのだと思う。

６ 今の状態だと、useEffectなので、ページが開かれたらコードが走ってしまう。なので、initialという変数で操作。returnすることで、この直上にあるファンクション、つまりuseEffectファンクションが以降のコードを読み込まないつまり、sendCartData()が実行されないで終了するため、ばっちり。

なお、cssの設定の仕方、特にテンプレートリテラルの使い方はおさらいかつ重要という意味で要チェック。
  const cssClasses = `${classes.notification} ${specialClasses}`;


260

別の方法。React thunk というミドルウェアなるものを使用して非同期処理させるというもの、『コンポーネント内にコードを置かず、かつuseEffectを使わずに』。
だけど、あんまり意味わからないから、スキップ。丸暗記しても良いとも思う。この前のやり方でも全然問題ないとのこと。他の参考ページでは、redux.thunkみたいなのをインポートしてるのに、ここではしてない。余計意味不明。
ちなみに、キーワードは、action creatorだって。
多少わかりやすいかなと思うウェブサイト。
https://www.youtube.com/watch?v=1QI-UE3-0PU
https://qiita.com/jima-r20/items/7fee2f00dbd1f302e373
    『Redux-Thunkとは、（コンポーネント内ではなく、）ReduxのAction Creatorに非同期処理を実装するためのミドルウェア
https://nishinatoshiharu.com/redux-thunk-axios-tutorial/　　（非同期処理でTodoを表示させる、の部分、1ページくらいだけ）


261（データ送るやつ完了したから、Fetching data、データ持ってくる）、262と263も

260のthunkバージョンからの続きのコード。リロードしてもfirebaseから現時点のデータを持って表示させる。
手順としては、
    cart-actions.jsを作って、sendCartDataをcart-slice.jsから載せ替える。
    cart-actions.jsの中に、新たにfetchCartData()を乗せて、今度はPUTではなく、firebaseデータベースからGETする。ここで初めて、cartActions.replaceCart()が使われる。


